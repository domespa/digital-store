generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
//                  USERS          
// ==========================================
model User {
  id String @id @default(cuid())  // USIAMO STRINGA IN ID PER MOTIVI DI SICUREZZA, ID NUMERICI SONO FACILMENTE RECUPERABILI - IL DEFAULT GENERA ID AUTOMATICI ALFANUMERICI
  email String @unique  // NESSUNA DUPLICAZIONE
  password String
  firstName String
  lastName String
  role UserRole @default(USER)
  emailVerified Boolean @default(false)
  lastLoginAt DateTime?
  loginAttempts Int @default(0)
  lockedUntil DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdProducts Product[] @relation("ProductCreator")
  source String? 
  lastActivity DateTime? 
  notifications Notification[]
  notificationPreferences NotificationPreference?
  websocketConnections WebSocketConnection[]

  // RELAZIONI
  orders Order[]
  passwordResetTokens PasswordResetToken[]
  emailVerificationTokens EmailVerificationToken[]
  reviews Review[]
  reviewHelpfulVotes ReviewHelpfulVote[]
  reviewReports ReviewReport[]
  handledReports ReviewReport[] @relation("ReportHandler")
  moderationActions ReviewModerationLog[] @relation("ReviewModerator")
    wishlists Wishlist[]

  @@map("users") // NOME TABELLA
}

// ==========================================
//   PRODOTTI, CATEGORIE E LISTA PREFERITI 
// ==========================================

model Product{
  id String @id @default(cuid())
  name String
  slug String @unique 
  description String?
  shortDescription String?
  price Decimal @db.Decimal(10, 2) // MAX 99999999.99 
  originalPrice Decimal? @db.Decimal(10, 2)
  fileName String?
  filePath String?
  notifications Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  publishedAt DateTime?

  stock Int @default(0) 
  lowStockThreshold Int @default(5) 
  trackInventory Boolean @default(false) 
  allowBackorder Boolean @default(false) 

  viewCount Int @default(0) 
  downloadCount Int @default(0) 
  rating Decimal @default(0) @db.Decimal(3, 2) 
  averageRating Float @default(0)
  reviewCount Int @default(0) 
  ratingDistribution Json? // PER PERCENTUALI

  isActive Boolean @default(true)
  isFeatured Boolean @default(false) 
  isDigital Boolean @default(true) 

  seoTitle String? 
  seoDescription String? 

  createdBy String? 
  creator User? @relation("ProductCreator", fields: [createdBy], references: [id])

  // RELAZIONI
  orderItems OrderItem[]
  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])
  variants ProductVariant[]
  images ProductImage[]
  tags Tag[]
  reviews Review[] 
  wishlists Wishlist[]
  wishlistCount Int @default(0)

  @@map("products")
}

model Category {
  id String @id @default(cuid())
  name String @unique
  slug String @unique
  description String?
  parentId String? 
  parent Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  isActive Boolean @default(true)
  sortOrder Int @default(0) 
  seoTitle String?
  seoDescription String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELAZIONI
  products Product[]

  @@map("categories")
}

model ProductVariant {
  id String @id @default(cuid())
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  name String 
  price Decimal @db.Decimal(10, 2)
  originalPrice Decimal? @db.Decimal(10, 2) 
  fileName String
  filePath String
  downloadCount Int @default(0)
  maxDownloads Int? 
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELAZIONI
  orderItems OrderItem[]

  @@map("product_variants")
}

model Tag {
  id String @id @default(cuid())
  name String @unique
  slug String @unique
  color String? 
  createdAt DateTime @default(now())
  
  // RELAZIONI
  products Product[]

  @@map("tags")
}

model ProductImage {
  id String @id @default(cuid())
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url String
  altText String?
  sortOrder Int @default(0)
  isMain Boolean @default(false) // Immagine principale
  createdAt DateTime @default(now())

  @@map("product_images")
}

model Wishlist {
  id String @id @default(cuid())
  userId String
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId], name: "unique_user_product_wishlist")
  @@index([userId])
  @@index([productId])
  @@map("wishlists")
}
// ==========================================
//        REVIEW VARIE ED EVENTUALI
// ==========================================
model Review {
  id String @id @default(cuid())
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId String?
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  customerEmail String // PER OSPITI
  customerName String
  rating Int // 1-5 STELLINE
  title String?
  content String?
  isVerified Boolean @default(false) 
  isApproved Boolean @default(false) 
  helpfulCount Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notifications Notification[]

  isPinned Boolean @default(false) // PER COMMENTI IMPORTANTI
  reportCount Int @default(0)
  moderatorNotes String?

  orderId String? // COLLEGAMENTO ALL'ORDINE
  order Order? @relation(fields: [orderId], references: [id], onDelete: SetNull)

  // RELAZIONI
  helpfulVotes ReviewHelpfulVote[]
  reports ReviewReport[]
  adminActions ReviewModerationLog[]

  @@unique([userId, productId], name: "unique_user_product_review") // UNA RECENSIONE PER UTENTE PER PRODOTTO
  @@index([productId, isApproved])
  @@index([userId])
  @@index([createdAt])
  @@index([rating])
  @@index([isVerified])
  @@map("reviews")
}

model ReviewHelpfulVote {
  id String @id @default(cuid())
  userId String?
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewId String
  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  isHelpful Boolean 
  ipAddress String? // PER VOTI ANONIMI
  createdAt DateTime @default(now())
  
  @@unique([userId, reviewId], name: "unique_user_review_vote") // UN VOTO PER UTENTE PER RECENSIONE
  @@unique([ipAddress, reviewId], name: "unique_ip_review_vote") // UN VOTO PER IP PER RECENSIONE (OSPITI)
  @@map("review_helpful_votes")
}

model ReviewReport {
  id String @id @default(cuid())
  reason ReportReason
  description String?
  status ReportStatus @default(PENDING)
  
  userId String?
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  reviewId String
  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  
  reporterEmail String? // PER SEGNALAZIONI ANONIME
  reporterName String? // PER SEGNALAZIONI ANONIME
  
  // GESTIONE ADMIN
  handledBy String?
  handler User? @relation("ReportHandler", fields: [handledBy], references: [id])
  handledAt DateTime?
  adminNotes String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([status])
  @@index([reviewId])
  @@map("review_reports")
}

model ReviewModerationLog {
  id String @id @default(cuid())
  action ModerationAction
  reason String?
  notes String?
  
  reviewId String
  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  
  moderatorId String
  moderator User @relation("ReviewModerator", fields: [moderatorId], references: [id])
  
  createdAt DateTime @default(now())
  
  @@index([reviewId])
  @@index([moderatorId])
  @@map("review_moderation_logs")
}


// ==========================================
//          ORDINI ED EVENTUALI
// ==========================================
model Order {
  id String @id @default(cuid())

  // DATI DEL CLIENTE
  customerEmail String
  customerFirstName String?
  customerLastName String?

  // DATI ORDINE
  total Decimal @db.Decimal(10, 2)
  status OrderStatus @default(PENDING)
  currency String @default("EUR")
  exchangeRate Decimal? @db.Decimal(10, 4) 
  originalAmount Decimal? @db.Decimal(10, 2)

  // PAGAMENTO
  paymentProvider PaymentProvider?
  stripePaymentIntentId String?
  paypalOrderId String?
  paymentStatus PaymentStatus @default(PENDING)

  // TIMESTAMPS
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notifications Notification[]

  // RELAZIONI
  userId String?
  user User? @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  reviews Review[]

  @@map("orders")
}

// ORDER ITEMS
model OrderItem {
  id String @id @default(cuid())
  quantity Int @default(1)
  price Decimal @db.Decimal(10, 2)

  // RELAZIONI
  orderId String
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String?
  product Product? @relation(fields: [productId], references: [id])

  variantId String?
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

// SCONTI
model DiscountCode {
  id String @id @default(cuid())
  code String @unique
  description String?
  discountType DiscountType 
  discountValue Decimal @db.Decimal(10, 2)
  isActive Boolean @default(true)
  validFrom DateTime?
  validUntil DateTime?
  maxUses Int?
  currentUses Int @default(0)
  createdAt DateTime @default(now())

  @@map("discount_codes")
}

// TRACK VISITE
model PageView {
  id String @id @default(cuid())
  page String
  userAgent String?
  ipAddress String?
  country String?
  createdAt DateTime @default(now())

  @@map("page_views")
}

// EMAIL PER GLI ORDINI
model EmailQueue {
  id String @id @default(cuid())
  to String
  subject String
  htmlContent String
  textContent String?
  emailType EmailType
  status EmailStatus @default(PENDING)
  attempts Int @default(0)
  lastAttempt DateTime?
  createdAt DateTime @default(now())

  @@map("email_queue")
}

// ==========================================
//          VERIFICHE ACCOUNT
// ==========================================
// RESET PASSWORD
model PasswordResetToken {
  id String @id @default(cuid())
  token String @unique
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  used Boolean @default(false)

  @@map("password_reset_tokens")
}

// VERIFICA EMAIL
model EmailVerificationToken {
  id String @id @default(cuid())
  token String @unique
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  used Boolean @default(false)

  @@map("email_verification_tokens")
}

// ==========================================
//                NORTIFICHE
// ==========================================
model Notification {
  id        String   @id @default(cuid())
  userId    String?  
  type      NotificationType
  title     String
  message   String
  data      Json?    
  priority  NotificationPriority @default(NORMAL)
  category  NotificationCategory
  isRead    Boolean  @default(false)
  readAt    DateTime?
  
  // Delivery tracking
  isDelivered Boolean @default(false)
  deliveredAt DateTime?
  deliveryMethod DeliveryMethod?
  
  // Scheduling
  scheduledFor DateTime?
  
  // References
  orderId     String?
  productId   String?
  reviewId    String?
  userId_ref  String? 
  
  // Metadata
  source      String?  
  actionUrl   String?  
  expiresAt   DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  order   Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  review  Review?  @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@map("notifications")
  @@index([userId, createdAt])
  @@index([type, createdAt])
  @@index([isRead, userId])
  @@index([scheduledFor])
}

model NotificationPreference {
  id     String @id @default(cuid())
  userId String @unique
  
  // Channel preferences
  enableWebSocket    Boolean @default(true)
  enableEmail        Boolean @default(true)
  enablePush         Boolean @default(false)
  
  // Category preferences
  orderUpdates       Boolean @default(true)
  paymentAlerts      Boolean @default(true)
  productUpdates     Boolean @default(true)
  reviewNotifications Boolean @default(true)
  promotions         Boolean @default(false)
  systemAlerts       Boolean @default(true)
  inventoryAlerts    Boolean @default(false) // ADMIN
  
  // Timing preferences
  quietHours         Json?    
  instantDelivery    Boolean @default(true)
  batchDelivery      Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notification_preferences")
}

model NotificationTemplate {
  id          String @id @default(cuid())
  type        NotificationType @unique
  category    NotificationCategory
  
  // Templates per canale
  websocketTitle    String
  websocketMessage  String
  emailSubject      String?
  emailTemplate     String?
  pushTitle         String?
  pushMessage       String?
  
  // Configurazione
  priority          NotificationPriority @default(NORMAL)
  isActive          Boolean @default(true)
  requiresAction    Boolean @default(false)
  autoExpire        Boolean @default(false)
  expirationHours   Int?
  
  variables         Json?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("notification_templates")
}

model WebSocketConnection {
  id            String   @id @default(cuid())
  userId        String
  socketId      String   @unique
  userAgent     String?
  ipAddress     String?
  isActive      Boolean  @default(true)
  lastPing      DateTime @default(now())
  connectedAt   DateTime @default(now())
  disconnectedAt DateTime?
  

  subscribedChannels Json? 
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("websocket_connections")
  @@index([userId, isActive])
  @@index([socketId])
}


// ==========================================
//                ENUM
// ==========================================
enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentProvider {
  STRIPE
  PAYPAL
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum EmailType {
  ORDER_CONFIRMATION
  DOWNLOAD_LINK
  CART_ABANDONMENT
  RECEIPT
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
}

enum ReportReason {
  SPAM
  INAPPROPRIATE_CONTENT
  FAKE_REVIEW
  OFFENSIVE_LANGUAGE
  IRRELEVANT
  COPYRIGHT_VIOLATION
  OTHER
}

enum ReportStatus {
  PENDING
  UNDER_REVIEW
  RESOLVED
  DISMISSED
}

enum ModerationAction {
  APPROVED
  REJECTED
  PINNED
  UNPINNED
  EDITED
  DELETED
  RESTORED
}

enum NotificationType {

  ORDER_CREATED
  ORDER_CONFIRMED
  ORDER_PROCESSING
  ORDER_SHIPPED
  ORDER_DELIVERED
  ORDER_CANCELLED
  ORDER_REFUNDED

  PAYMENT_SUCCESS
  PAYMENT_FAILED
  PAYMENT_PENDING
  PAYMENT_REFUNDED

  PRODUCT_BACK_IN_STOCK
  PRODUCT_PRICE_DROP
  PRODUCT_NEW_REVIEW
  WISHLIST_ITEM_SALE

  REVIEW_SUBMITTED
  REVIEW_APPROVED
  REVIEW_REJECTED
  REVIEW_HELPFUL_VOTE

  ACCOUNT_CREATED
  PASSWORD_CHANGED
  EMAIL_VERIFIED
  PROFILE_UPDATED

  NEW_ORDER_ADMIN
  LOW_STOCK_ALERT
  HIGH_VALUE_ORDER
  SUSPICIOUS_ACTIVITY
  SYSTEM_ERROR
  BACKUP_COMPLETED

  PROMOTION_STARTED
  DISCOUNT_EXPIRING
  CART_ABANDONED
  WELCOME_SERIES
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum NotificationCategory {
  ORDER
  PAYMENT
  PRODUCT
  REVIEW
  SYSTEM
  ADMIN
  MARKETING
  SECURITY
}

enum DeliveryMethod {
  WEBSOCKET
  EMAIL
  PUSH
  SMS
}